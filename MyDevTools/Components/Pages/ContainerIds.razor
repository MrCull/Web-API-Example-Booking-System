@page "/containerIds"
@inherits Base.BasePage
@inject Services.IClipboardService ClipboardService
@using System.Text

<h3 class="text-center">Container Ids</h3>

<div class="container">
    <div class="row">
        <div class="col-md-5 offset-md-3">
            <div class="form-group">
                <label for="prefix">Optional Prefix (e.g. MSCU):</label>
                <input id="prefix" type="text" maxlength="4" class="form-control" @bind="prefix" />
            </div>

            <div class="form-group">
                <label for="quantity">Quantity:</label>
                <input id="quantity" type="number" class="form-control" @bind="quantity" />
            </div>

            <div class="d-flex justify-content-between">
                <button class="btn btn-primary btn-block" @onclick="GenerateCodes">Generate Ids</button>
                <button class="btn btn-success btn-block" @onclick="CopyToClipboard">Copy To Clipboard</button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(generatedCodes))
    {
        <div class="row mt-4">
            <div class="col-md-6 offset-md-3">
                <label>Generated Codes:</label>
                <textarea readonly class="form-control" rows="6">@generatedCodes</textarea>
                <div class="mt-2 text-success">@copyConfirmationMessage</div>
            </div>
        </div>
    }
</div>

@code {
    private string prefix = "";
    private int quantity = 5;
    private string generatedCodes = "";
    string copyConfirmationMessage = "";
    private string[] commonPrefixes = {
    "MSCU", "MAEU", "TCNU", "CGMU", "SEGU",
    "APMU", "CMAU", "UACU", "SUDU", "TRLU",
    "PONU", "TEMU", "OOLU", "SWMU", "CPSU",
    "FSCU", "TTNU", "IPXU", "AMZU", "CRXU",
    "AZLU", "EISU", "BSIU", "NYKU", "YMLU"};


    protected override async Task OnInitializedAsync()
    {
        await UpdateMetaTagsAsync("Generate container IDs.", "Container IDs, Dev Tools, Identifier");

        GenerateCodes();
    }

    private void GenerateCodes()
    {
        generatedCodes = "";

        if (!string.IsNullOrWhiteSpace(prefix) && prefix.Length > 0 && prefix.Length < 4)
        {
            return;
        }

        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        for (int i = 1; i <= quantity; i++)
        {
            string number = random.Next(100000, 999999).ToString(); // Generate a random 7-digit number
            string thisPrefix = string.IsNullOrWhiteSpace(prefix) || prefix.Length != 4 ? GeneratePrefix() : prefix;
            sb.AppendLine($"{thisPrefix}{number}{CalculateCheckDigit(prefix + number)}"); // Append the correct check code
        }

        generatedCodes = sb.ToString();
    }

    private string GeneratePrefix()
    {
        Random rand = new Random();
        return commonPrefixes[rand.Next(commonPrefixes.Length)];
    }

    private int CalculateCheckDigit(string containerCode)
    {
        int sum = 0;
        int factor = 1;
        for (int i = 0; i < containerCode.Length; i++)
        {
            int charValue;
            char ch = containerCode[i];
            if (char.IsLetter(ch))
            {
                // A=10, B=12, ..., Z=52
                charValue = (ch - 'A' + 10);
            }
            else
            {
                // '0' = 0, '1' = 1, ..., '9' = 9
                charValue = (ch - '0');
            }
            sum += charValue * factor;
            factor *= 2;
        }
        return sum % 11 % 10;
    }


    private async Task CopyToClipboard()
    {
        try
        {
            await ClipboardService.CopyToClipboardAsync(generatedCodes);
            copyConfirmationMessage = "Text copied to clipboard!";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
