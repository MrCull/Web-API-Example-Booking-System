@page "/randomnumbergenerator"
@inherits Base.BasePage
@inject Services.IClipboardService ClipboardService

<h3 class="text-center">Random Numbers</h3>


<div class="container">
    <div class="row">
        <div class="col-md-4 offset-md-4">
            <div class="form-group">
                <label for="minValue">Min:</label>
                <input type="number" id="minValue" class="form-control" @bind="minValue"/>
            </div>

            <div class="form-group">
                <label for="maxValue">Max:</label>
                <input type="number" id="maxValue" class="form-control" @bind="maxValue"/>
            </div>

            <div class="form-group">
                <label for="quantity">Quantity:</label>
                <input type="number" id="quantity" class="form-control" @bind="quantity"/>
            </div>

            <button class="btn btn-primary btn-block" @onclick="GenerateRandomNumbers">Generate</button>
        </div>
    </div>

    <br />
    <OutputAndCopyToClipboard OutputText="@generatedNumbersText" />
</div>

@code {
    private int minValue = 1;
    private int maxValue = 100;
    private int quantity = 5;
    private List<int> generatedNumbers = new List<int>();
    private string generatedNumbersText = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateMetaTagsAsync("Generate random numbers for various purposes.", "Random Numbers, Dev Tools, Math Tools");

        base.OnInitialized();

        // Generate random numbers with default values when the page is first visited
        GenerateRandomNumbers();
    }

    private void GenerateRandomNumbers()
    {
        var random = new Random();
        generatedNumbers = new List<int>();
        for (int i = 0; i < quantity; i++)
        {
            int randomNumber = random.Next(minValue, maxValue + 1);
            generatedNumbers.Add(randomNumber);
        }
        generatedNumbersText = string.Join("\n", generatedNumbers);
    }
}