@page "/ColorPickerConverter"
@inherits Base.BasePage

<h3 class="text-center">Color Picker/Converter</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="form-group">
                <label for="colorPicker">Select Color:</label>
                <input type="color" id="colorPicker" class="form-control" @bind="selectedColor" @oninput="ConvertColors" />
            </div>

            <div class="form-group">
                <label for="colorFormat">Select Format:</label>
                <select id="colorFormat" class="form-control" @bind="selectedFormat">
                    @foreach (var format in Enum.GetNames(typeof(ColorFormats)))
                    {
                        <option value="@format">@format</option>
                    }
                </select>
            </div>

            <OutputAndCopyToClipboard OutputText="@convertedColor" />
        </div>
    </div>
</div>

@code {
    private Timer timer;
    private enum ColorFormats
    {
        RGB,
        HEX,
        HSL
    }

    private ColorFormats selectedFormat = ColorFormats.RGB;
    private string selectedColor = "#FFFFFF";  // Default to white
    private string convertedColor = "RGB(255, 255, 255)";  // Default to white

    protected override async Task OnInitializedAsync()
    {
        await UpdateMetaTagsAsync("Convert and choose colours for your projects.", "Colour Converter, Dev Tools, Design");

        // Initialize the timer to call ConvertColors every 0.25 seconds
        timer = new Timer(_ => ConvertColors(), null, 0, 250);
        ConvertColors();
    }

    private void ConvertColors()
    {
        switch (selectedFormat)
        {
            case ColorFormats.RGB:
                convertedColor = ConvertHexToRGB(selectedColor);
                break;
            case ColorFormats.HEX:
                convertedColor = selectedColor;  // No conversion needed
                break;
            case ColorFormats.HSL:
                convertedColor = ConvertRGBToHSL(ConvertHexToRGB(selectedColor));
                break;
        }
        StateHasChanged();
    }

    private string ConvertHexToRGB(string hex)
    {
        // Remove '#' if it exists
        hex = hex.Replace("#", string.Empty);

        byte r = Convert.ToByte(hex.Substring(0, 2), 16);
        byte g = Convert.ToByte(hex.Substring(2, 2), 16);
        byte b = Convert.ToByte(hex.Substring(4, 2), 16);

        return $"RGB({r}, {g}, {b})";
    }

    private string ConvertRGBToHSL(string rgb)
    {
        // Extract RGB values from the string
        string[] parts = rgb.Replace("RGB(", string.Empty).Replace(")", string.Empty).Split(',');
        float r = int.Parse(parts[0].Trim()) / 255.0f;
        float g = int.Parse(parts[1].Trim()) / 255.0f;
        float b = int.Parse(parts[2].Trim()) / 255.0f;

        float max = Math.Max(r, Math.Max(g, b));
        float min = Math.Min(r, Math.Min(g, b));

        float h, s, l;
        l = (max + min) / 2.0f;

        if (max == min)
        {
            h = s = 0;  // achromatic
        }
        else
        {
            float d = max - min;
            s = l > 0.5 ? d / (2.0f - max - min) : d / (max + min);

            if (max == r)
                h = (g - b) / d + (g < b ? 6 : 0);
            else if (max == g)
                h = (b - r) / d + 2;
            else
                h = (r - g) / d + 4;

            h /= 6;
        }

        h = MathF.Round(h * 360);
        s = MathF.Round(s * 100);
        l = MathF.Round(l * 100);

        return $"HSL({h}, {s}%, {l}%)";
    }

}
