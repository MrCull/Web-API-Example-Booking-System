@page "/GuidGenerator"
@inherits Base.BasePage
@inject Services.IClipboardService ClipboardService

<h3 class="text-center">GUID Generator</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="form-group">
                <label for="guidCase">Select Case:</label>
                <select id="guidCase" class="form-control" @bind="selectedCase">
                    @foreach (var caseOption in Enum.GetNames(typeof(GuidCase)))
                    {
                        <option value="@caseOption">@caseOption</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="quantity">Select Quantity:</label>
                <input type="number" id="quantity" class="form-control" @bind="quantity" min="1" max="100" />
            </div>

            <button class="btn btn-primary btn-block" @onclick="GenerateGUID">Generate GUID</button>
            <button class="btn btn-success btn-block" @onclick="CopyToClipboard">Copy to Clipboard</button>
        </div>
    </div>

    @if (guidResults != null && guidResults.Count > 0)
    {
        <OutputAndCopyToClipboard OutputText="@string.Join("\n", guidResults)" />
    }
</div>

@code {
    private enum GuidCase
    {
        Lower,
        Upper
    }

    private GuidCase selectedCase = GuidCase.Upper;
    private int quantity = 1;
    private List<string> guidResults = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateMetaTagsAsync("Generate GUIDs with ease.", "GUID Generator, Dev Tools, Identifier");

        GenerateGUID();
    }

    private void GenerateGUID()
    {
        guidResults.Clear();
        for (int i = 0; i < quantity; i++)
        {
            var guid = Guid.NewGuid().ToString();
            if (selectedCase == GuidCase.Upper)
            {
                guid = guid.ToUpper();
            }
            guidResults.Add(guid);
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await ClipboardService.CopyToClipboardAsync(string.Join("\n", guidResults));
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to copy to clipboard: " + ex.Message);
        }
    }
}
