@page "/BranchNameFormatter"
@inherits Base.BasePage
@inject Services.IClipboardService ClipboardService

<h3 class="text-center">Git Branch Name Formatter</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="form-group">
                <label for="inputString">Input String (rest assured, your data stays on your device):</label>
                <textarea id="inputString" class="form-control" @bind="inputString"></textarea>
            </div>

            <button class="btn btn-primary btn-block" @onclick="FormatGitBranchName">Format Git Branch Name</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(formattedString))
    {
        <OutputAndCopyToClipboard OutputText="@formattedString" />
    }
</div>

@code {
    private string inputString = "Feature 12345 : Example work item name";
    private string formattedString = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateMetaTagsAsync("Format a string to be used as a Git branch name.", "Git Branch Name Formatter, Dev Tools, Git Tools");

        FormatGitBranchName();
    }

    private void FormatGitBranchName()
    {
        try
        {
            // Remove only the first word immediately followed by a number
            var regex = new System.Text.RegularExpressions.Regex(@"\b(\w+)(?=\s+\d)");
            string stringWithoutIssueWord = regex.Replace(inputString, "", 1);

            // Replace invalid characters with underscores and remove leading/trailing underscores
            formattedString = System.Text.RegularExpressions.Regex.Replace(stringWithoutIssueWord, "[^a-zA-Z0-9]+", "_").Trim('_');
        }
        catch (Exception ex)
        {
            formattedString = "Error: " + ex.Message;
        }
    }
}
